package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"narratives-crm-backend/graph/generated"
	"narratives-crm-backend/graph/model"
	"path/filepath"
	"time"

	"cloud.google.com/go/storage"
	"google.golang.org/api/option"
)

// ServiceAccountKey represents the structure of a service account JSON file
type ServiceAccountKey struct {
	ClientEmail string `json:"client_email"`
	PrivateKey  string `json:"private_key"`
}

// readServiceAccountKey reads and parses the service account JSON file
func readServiceAccountKey(filePath string) (*ServiceAccountKey, error) {
	data, err := ioutil.ReadFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to read service account file: %v", err)
	}

	var key ServiceAccountKey
	if err := json.Unmarshal(data, &key); err != nil {
		return nil, fmt.Errorf("failed to parse service account JSON: %v", err)
	}

	return &key, nil
}

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input model.CustomerInput) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: CreateCustomer - createCustomer"))
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id string, input model.CustomerUpdateInput) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: UpdateCustomer - updateCustomer"))
}

// DeleteCustomer is the resolver for the deleteCustomer field.
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCustomer - deleteCustomer"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.OrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, id string, status model.OrderStatus) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: UpdateOrderStatus - updateOrderStatus"))
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *mutationResolver) DeleteOrder(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteOrder - deleteOrder"))
}

// CreateInteraction is the resolver for the createInteraction field.
func (r *mutationResolver) CreateInteraction(ctx context.Context, input model.InteractionInput) (*model.Interaction, error) {
	panic(fmt.Errorf("not implemented: CreateInteraction - createInteraction"))
}

// UpdateInteractionStatus is the resolver for the updateInteractionStatus field.
func (r *mutationResolver) UpdateInteractionStatus(ctx context.Context, id string, status model.InteractionStatus) (*model.Interaction, error) {
	panic(fmt.Errorf("not implemented: UpdateInteractionStatus - updateInteractionStatus"))
}

// CompleteInteraction is the resolver for the completeInteraction field.
func (r *mutationResolver) CompleteInteraction(ctx context.Context, id string) (*model.Interaction, error) {
	panic(fmt.Errorf("not implemented: CompleteInteraction - completeInteraction"))
}

// DeleteInteraction is the resolver for the deleteInteraction field.
func (r *mutationResolver) DeleteInteraction(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteInteraction - deleteInteraction"))
}

// GetAvatarUploadURL is the resolver for the getAvatarUploadUrl field.
func (r *mutationResolver) GetAvatarUploadURL(ctx context.Context, filename string, contentType string, folder *string) (*model.UploadURL, error) {
	// サービスアカウントファイルのパス
	credentialsPath := "./narratives-crm-service_account.json"

	// サービスアカウント情報を読み取り
	serviceAccount, err := readServiceAccountKey(credentialsPath)
	if err != nil {
		return nil, fmt.Errorf("failed to read service account: %v", err)
	}

	// Firebase Storage クライアントを初期化
	client, err := storage.NewClient(ctx, option.WithCredentialsFile(credentialsPath))
	if err != nil {
		return nil, fmt.Errorf("failed to create storage client: %v", err)
	}
	defer client.Close()

	// バケット名を設定（Google Cloud Storage のデフォルトバケット）
	bucketName := "narratives-crm.appspot.com"

	// フォルダパスを設定（デフォルトは "avatars"）
	folderPath := "avatars"
	if folder != nil && *folder != "" {
		folderPath = *folder
	}

	// ファイル名をサニタイズして一意性を確保
	fileName := filename
	if fileName == "" {
		fileName = fmt.Sprintf("avatar_%d", time.Now().Unix())
	}

	// Content-Typeのデフォルト値を設定（空の場合）
	finalContentType := contentType
	if finalContentType == "" {
		finalContentType = "image/jpeg"
	}

	// ファイル拡張子を確認
	ext := filepath.Ext(fileName)
	if ext == "" {
		// Content-Typeから拡張子を推測
		switch finalContentType {
		case "image/jpeg":
			ext = ".jpg"
		case "image/png":
			ext = ".png"
		case "image/gif":
			ext = ".gif"
		case "image/webp":
			ext = ".webp"
		default:
			ext = ".jpg"
		}
		fileName = fileName + ext
	}

	// 完全なオブジェクトパスを構築
	objectPath := fmt.Sprintf("%s/%s", folderPath, fileName)

	// Signed URL を生成（アップロード用）
	uploadURL, err := storage.SignedURL(bucketName, objectPath, &storage.SignedURLOptions{
		Scheme:         storage.SigningSchemeV4,
		Method:         "PUT",
		Expires:        time.Now().Add(15 * time.Minute), // 15分間有効
		ContentType:    finalContentType,
		GoogleAccessID: serviceAccount.ClientEmail,
		PrivateKey:     []byte(serviceAccount.PrivateKey),
	})
	if err != nil {
		return nil, fmt.Errorf("failed to generate upload URL: %v", err)
	}

	// ダウンロード用URLを生成
	downloadURL := fmt.Sprintf("https://storage.googleapis.com/%s/%s",
		bucketName, objectPath)

	return &model.UploadURL{
		URL:         uploadURL,
		SignedURL:   uploadURL,
		PublicURL:   downloadURL,
		DownloadURL: downloadURL,
		FileName:    fileName,
		ContentType: finalContentType,
	}, nil
}

// GetFileUploadURL is the resolver for the getFileUploadUrl field.
func (r *mutationResolver) GetFileUploadURL(ctx context.Context, filename string, contentType string, folder *string) (*model.UploadURL, error) {
	panic(fmt.Errorf("not implemented: GetFileUploadURL - getFileUploadUrl"))
}

// Customer is the resolver for the customer field.
func (r *queryResolver) Customer(ctx context.Context, id string) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: Customer - customer"))
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, pagination *model.PaginationInput, search *string, status *model.CustomerStatus) (*model.CustomerConnection, error) {
	panic(fmt.Errorf("not implemented: Customers - customers"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, pagination *model.PaginationInput, customerID *string, status *model.OrderStatus, dateFrom *time.Time, dateTo *time.Time) (*model.OrderConnection, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Interaction is the resolver for the interaction field.
func (r *queryResolver) Interaction(ctx context.Context, id string) (*model.Interaction, error) {
	panic(fmt.Errorf("not implemented: Interaction - interaction"))
}

// Interactions is the resolver for the interactions field.
func (r *queryResolver) Interactions(ctx context.Context, pagination *model.PaginationInput, customerID *string, typeArg *model.InteractionType, status *model.InteractionStatus) ([]*model.Interaction, error) {
	panic(fmt.Errorf("not implemented: Interactions - interactions"))
}

// Dashboard is the resolver for the dashboard field.
func (r *queryResolver) Dashboard(ctx context.Context) (*model.DashboardData, error) {
	panic(fmt.Errorf("not implemented: Dashboard - dashboard"))
}

// CustomerStats is the resolver for the customerStats field.
func (r *queryResolver) CustomerStats(ctx context.Context) (*model.CustomerStats, error) {
	panic(fmt.Errorf("not implemented: CustomerStats - customerStats"))
}

// OrderStats is the resolver for the orderStats field.
func (r *queryResolver) OrderStats(ctx context.Context) (*model.OrderStats, error) {
	panic(fmt.Errorf("not implemented: OrderStats - orderStats"))
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (string, error) {
	return "GraphQL server is healthy!", nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
