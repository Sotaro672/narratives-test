# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# CRM用のカスタムスカラー型
scalar Time

# CRM - 顧客管理システム用のスキーマ定義

# =====================================
# ユーザー (Users) 関連
# =====================================

type User {
  user_id: ID!
  first_name: String!
  last_name: String!
  first_name_katakana: String!
  last_name_katakana: String!
  email_address: String!
  role: UserRole!
  balance: Float!
  status: UserStatus!
  created_at: Time!
  updated_at: Time!
  
  # リレーション
  wallets: [Wallet!]!
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  HOT
  COLD
  PENDING
}

input UserInput {
  first_name: String!
  last_name: String!
  first_name_katakana: String!
  last_name_katakana: String!
  email_address: String!
  role: UserRole = USER
  balance: Float = 0
  status: UserStatus = ACTIVE
}

input UserUpdateInput {
  first_name: String
  last_name: String
  first_name_katakana: String
  last_name_katakana: String
  email_address: String
  role: UserRole
  balance: Float
  status: UserStatus
}

# =====================================
# ウォレット (Wallets) 関連
# =====================================

type Wallet {
  wallet_address: ID!
  user_id: ID!
  balance: Float!
  currency: String!
  status: WalletStatus!
  created_at: Time!
  updated_at: Time!
  
  # リレーション
  user: User!
}

enum WalletStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  FROZEN
}

input WalletInput {
  user_id: ID!
  wallet_address: ID!
  balance: Float = 0
  currency: String = "JPY"
  status: WalletStatus = ACTIVE
}

input WalletUpdateInput {
  balance: Float
  currency: String
  status: WalletStatus
}

# =====================================
# 注文 (Order) 関連
# =====================================

type Order {
  id: ID!
  user_id: ID!
  orderNumber: String!
  status: OrderStatus!
  totalAmount: Float!
  currency: String!
  orderDate: Time!
  deliveryDate: Time
  notes: String
  createdAt: Time!
  updatedAt: Time!
  
  # リレーション
  user: User!
  items: [OrderItem!]!
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

type OrderItem {
  id: ID!
  orderID: ID!
  productName: String!
  quantity: Int!
  unitPrice: Float!
  totalPrice: Float!
  
  # リレーション
  order: Order!
}

input OrderInput {
  user_id: ID!
  orderNumber: String!
  totalAmount: Float!
  currency: String!
  orderDate: Time!
  deliveryDate: Time
  notes: String
  items: [OrderItemInput!]!
}

input OrderItemInput {
  productName: String!
  quantity: Int!
  unitPrice: Float!
}

# =====================================
# インタラクション (Interaction) 関連
# =====================================

type Interaction {
  id: ID!
  user_id: ID!
  type: InteractionType!
  subject: String!
  content: String!
  channel: InteractionChannel!
  status: InteractionStatus!
  assignedTo: String
  scheduledAt: Time
  completedAt: Time
  createdAt: Time!
  updatedAt: Time!
  
  # リレーション
  user: User!
}

enum InteractionType {
  EMAIL
  PHONE_CALL
  MEETING
  NOTE
  TASK
  FOLLOW_UP
}

enum InteractionChannel {
  EMAIL
  PHONE
  IN_PERSON
  VIDEO_CALL
  CHAT
  SOCIAL_MEDIA
}

enum InteractionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

input InteractionInput {
  user_id: ID!
  type: InteractionType!
  subject: String!
  content: String!
  channel: InteractionChannel!
  assignedTo: String
  scheduledAt: Time
}

# =====================================
# レポート・分析用
# =====================================

type UserStats {
  totalUsers: Int!
  activeUsers: Int!
  newUsersThisMonth: Int!
  userGrowthRate: Float!
}

type WalletStats {
  totalWallets: Int!
  activeWallets: Int!
  totalBalance: Float!
  averageBalance: Float!
}

type OrderStats {
  totalOrders: Int!
  totalRevenue: Float!
  ordersThisMonth: Int!
  revenueThisMonth: Float!
  averageOrderValue: Float!
}

type DashboardData {
  userStats: UserStats!
  walletStats: WalletStats!
  orderStats: OrderStats!
  recentOrders: [Order!]!
  upcomingInteractions: [Interaction!]!
}

# =====================================
# ページネーション
# =====================================

input PaginationInput {
  page: Int = 1
  limit: Int = 10
  sortBy: String = "createdAt"
  sortOrder: SortOrder = DESC
}

enum SortOrder {
  ASC
  DESC
}

type PageInfo {
  page: Int!
  limit: Int!
  total: Int!
  pages: Int!
  hasNext: Boolean!
  hasPrev: Boolean!
}

type UserConnection {
  users: [User!]!
  pageInfo: PageInfo!
}

type WalletConnection {
  wallets: [Wallet!]!
  pageInfo: PageInfo!
}

type OrderConnection {
  orders: [Order!]!
  pageInfo: PageInfo!
}

# =====================================
# Query Root
# =====================================

type Query {
  # ユーザー関連
  user(user_id: ID!): User
  users(
    pagination: PaginationInput
    search: String
    status: UserStatus
  ): UserConnection!
  
  # ウォレット関連
  wallet(wallet_address: ID!): Wallet
  wallets(
    pagination: PaginationInput
    user_id: ID
    status: WalletStatus
  ): WalletConnection!
  
  # 注文関連
  order(id: ID!): Order
  orders(
    pagination: PaginationInput
    user_id: ID
    status: OrderStatus
    dateFrom: Time
    dateTo: Time
  ): OrderConnection!
  
  # インタラクション関連
  interaction(id: ID!): Interaction
  interactions(
    pagination: PaginationInput
    user_id: ID
    type: InteractionType
    status: InteractionStatus
  ): [Interaction!]!
  
  # ダッシュボード・分析
  dashboard: DashboardData!
  userStats: UserStats!
  walletStats: WalletStats!
  orderStats: OrderStats!
  
  # ヘルスチェック
  health: String!
}

# =====================================
# ファイルアップロード関連
# =====================================

type UploadUrl {
  url: String!
  signedUrl: String!
  publicUrl: String!
  downloadUrl: String!
  fileName: String!
  contentType: String!
}

input UploadInput {
  fileName: String!
  contentType: String!
  folder: String
}

# =====================================
# Mutation Root
# =====================================

type Mutation {
  # ユーザー関連
  createUser(input: UserInput!): User!
  updateUser(user_id: ID!, input: UserUpdateInput!): User!
  deleteUser(user_id: ID!): Boolean!
  
  # ウォレット関連
  createWallet(input: WalletInput!): Wallet!
  updateWallet(wallet_address: ID!, input: WalletUpdateInput!): Wallet!
  deleteWallet(wallet_address: ID!): Boolean!
  
  # 注文関連
  createOrder(input: OrderInput!): Order!
  updateOrderStatus(id: ID!, status: OrderStatus!): Order!
  deleteOrder(id: ID!): Boolean!
  
  # インタラクション関連
  createInteraction(input: InteractionInput!): Interaction!
  updateInteractionStatus(id: ID!, status: InteractionStatus!): Interaction!
  completeInteraction(id: ID!): Interaction!
  deleteInteraction(id: ID!): Boolean!
  
  # ファイルアップロード関連
  getAvatarUploadUrl(filename: String!, contentType: String!, folder: String): UploadUrl!
  getFileUploadUrl(filename: String!, contentType: String!, folder: String): UploadUrl!
}
